/* tslint:disable */
/* eslint-disable */
/**
 * 3DS OUTSCALE API
 * Welcome to the OUTSCALE API documentation.<br /><br />  The OUTSCALE API enables you to manage your resources in the OUTSCALE Cloud. This documentation describes the different actions available along with code examples.<br /><br />  Note that the OUTSCALE Cloud is compatible with Amazon Web Services (AWS) APIs, but some resources have different names in AWS than in the OUTSCALE API. You can find a list of the differences [here](https://docs.outscale.com/en/userguide/OUTSCALE-APIs-Reference.html).<br /><br />  You can also manage your resources using the [Cockpit](https://docs.outscale.com/en/userguide/About-Cockpit.html) web interface.
 *
 * The version of the OpenAPI document: 1.18
 * Contact: support@outscale.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    CreateImageExportTaskRequest,
    CreateImageExportTaskRequestFromJSON,
    CreateImageExportTaskRequestToJSON,
    CreateImageExportTaskResponse,
    CreateImageExportTaskResponseFromJSON,
    CreateImageExportTaskResponseToJSON,
    CreateImageRequest,
    CreateImageRequestFromJSON,
    CreateImageRequestToJSON,
    CreateImageResponse,
    CreateImageResponseFromJSON,
    CreateImageResponseToJSON,
    DeleteImageRequest,
    DeleteImageRequestFromJSON,
    DeleteImageRequestToJSON,
    DeleteImageResponse,
    DeleteImageResponseFromJSON,
    DeleteImageResponseToJSON,
    ErrorResponse,
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    ReadImageExportTasksRequest,
    ReadImageExportTasksRequestFromJSON,
    ReadImageExportTasksRequestToJSON,
    ReadImageExportTasksResponse,
    ReadImageExportTasksResponseFromJSON,
    ReadImageExportTasksResponseToJSON,
    ReadImagesRequest,
    ReadImagesRequestFromJSON,
    ReadImagesRequestToJSON,
    ReadImagesResponse,
    ReadImagesResponseFromJSON,
    ReadImagesResponseToJSON,
    UpdateImageRequest,
    UpdateImageRequestFromJSON,
    UpdateImageRequestToJSON,
    UpdateImageResponse,
    UpdateImageResponseFromJSON,
    UpdateImageResponseToJSON,
} from '../models';

export interface CreateImageOperationRequest {
    createImageRequest?: CreateImageRequest;
}

export interface CreateImageExportTaskOperationRequest {
    createImageExportTaskRequest?: CreateImageExportTaskRequest;
}

export interface DeleteImageOperationRequest {
    deleteImageRequest?: DeleteImageRequest;
}

export interface ReadImageExportTasksOperationRequest {
    readImageExportTasksRequest?: ReadImageExportTasksRequest;
}

export interface ReadImagesOperationRequest {
    readImagesRequest?: ReadImagesRequest;
}

export interface UpdateImageOperationRequest {
    updateImageRequest?: UpdateImageRequest;
}

/**
 * ImageApi - interface
 * 
 * @export
 * @interface ImageApiInterface
 */
export interface ImageApiInterface {
    /**
     * 
     * @param {CreateImageRequest} [createImageRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImageApiInterface
     */
    createImageRaw(requestParameters: CreateImageOperationRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<CreateImageResponse>>;

    /**
     */
    createImage(requestParameters: CreateImageOperationRequest, initOverrides?: RequestInit): Promise<CreateImageResponse>;

    /**
     * 
     * @param {CreateImageExportTaskRequest} [createImageExportTaskRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImageApiInterface
     */
    createImageExportTaskRaw(requestParameters: CreateImageExportTaskOperationRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<CreateImageExportTaskResponse>>;

    /**
     */
    createImageExportTask(requestParameters: CreateImageExportTaskOperationRequest, initOverrides?: RequestInit): Promise<CreateImageExportTaskResponse>;

    /**
     * 
     * @param {DeleteImageRequest} [deleteImageRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImageApiInterface
     */
    deleteImageRaw(requestParameters: DeleteImageOperationRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<DeleteImageResponse>>;

    /**
     */
    deleteImage(requestParameters: DeleteImageOperationRequest, initOverrides?: RequestInit): Promise<DeleteImageResponse>;

    /**
     * 
     * @param {ReadImageExportTasksRequest} [readImageExportTasksRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImageApiInterface
     */
    readImageExportTasksRaw(requestParameters: ReadImageExportTasksOperationRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<ReadImageExportTasksResponse>>;

    /**
     */
    readImageExportTasks(requestParameters: ReadImageExportTasksOperationRequest, initOverrides?: RequestInit): Promise<ReadImageExportTasksResponse>;

    /**
     * 
     * @param {ReadImagesRequest} [readImagesRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImageApiInterface
     */
    readImagesRaw(requestParameters: ReadImagesOperationRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<ReadImagesResponse>>;

    /**
     */
    readImages(requestParameters: ReadImagesOperationRequest, initOverrides?: RequestInit): Promise<ReadImagesResponse>;

    /**
     * 
     * @param {UpdateImageRequest} [updateImageRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImageApiInterface
     */
    updateImageRaw(requestParameters: UpdateImageOperationRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<UpdateImageResponse>>;

    /**
     */
    updateImage(requestParameters: UpdateImageOperationRequest, initOverrides?: RequestInit): Promise<UpdateImageResponse>;

}

/**
 * 
 */
export class ImageApi extends runtime.BaseAPI implements ImageApiInterface {

    /**
     */
    async createImageRaw(requestParameters: CreateImageOperationRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<CreateImageResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/CreateImage`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateImageRequestToJSON(requestParameters.createImageRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreateImageResponseFromJSON(jsonValue));
    }

    /**
     */
    async createImage(requestParameters: CreateImageOperationRequest = {}, initOverrides?: RequestInit): Promise<CreateImageResponse> {
        const response = await this.createImageRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async createImageExportTaskRaw(requestParameters: CreateImageExportTaskOperationRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<CreateImageExportTaskResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/CreateImageExportTask`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateImageExportTaskRequestToJSON(requestParameters.createImageExportTaskRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreateImageExportTaskResponseFromJSON(jsonValue));
    }

    /**
     */
    async createImageExportTask(requestParameters: CreateImageExportTaskOperationRequest = {}, initOverrides?: RequestInit): Promise<CreateImageExportTaskResponse> {
        const response = await this.createImageExportTaskRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async deleteImageRaw(requestParameters: DeleteImageOperationRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<DeleteImageResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/DeleteImage`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: DeleteImageRequestToJSON(requestParameters.deleteImageRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DeleteImageResponseFromJSON(jsonValue));
    }

    /**
     */
    async deleteImage(requestParameters: DeleteImageOperationRequest = {}, initOverrides?: RequestInit): Promise<DeleteImageResponse> {
        const response = await this.deleteImageRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async readImageExportTasksRaw(requestParameters: ReadImageExportTasksOperationRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<ReadImageExportTasksResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/ReadImageExportTasks`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ReadImageExportTasksRequestToJSON(requestParameters.readImageExportTasksRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ReadImageExportTasksResponseFromJSON(jsonValue));
    }

    /**
     */
    async readImageExportTasks(requestParameters: ReadImageExportTasksOperationRequest = {}, initOverrides?: RequestInit): Promise<ReadImageExportTasksResponse> {
        const response = await this.readImageExportTasksRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async readImagesRaw(requestParameters: ReadImagesOperationRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<ReadImagesResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/ReadImages`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ReadImagesRequestToJSON(requestParameters.readImagesRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ReadImagesResponseFromJSON(jsonValue));
    }

    /**
     */
    async readImages(requestParameters: ReadImagesOperationRequest = {}, initOverrides?: RequestInit): Promise<ReadImagesResponse> {
        const response = await this.readImagesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async updateImageRaw(requestParameters: UpdateImageOperationRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<UpdateImageResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/UpdateImage`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateImageRequestToJSON(requestParameters.updateImageRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UpdateImageResponseFromJSON(jsonValue));
    }

    /**
     */
    async updateImage(requestParameters: UpdateImageOperationRequest = {}, initOverrides?: RequestInit): Promise<UpdateImageResponse> {
        const response = await this.updateImageRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
