/* tslint:disable */
/* eslint-disable */
/**
 * 3DS OUTSCALE API
 * Welcome to the OUTSCALE API documentation.<br /><br />  The OUTSCALE API enables you to manage your resources in the OUTSCALE Cloud. This documentation describes the different actions available along with code examples.<br /><br />  Note that the OUTSCALE Cloud is compatible with Amazon Web Services (AWS) APIs, but some resources have different names in AWS than in the OUTSCALE API. You can find a list of the differences [here](https://docs.outscale.com/en/userguide/OUTSCALE-APIs-Reference.html).<br /><br />  You can also manage your resources using the [Cockpit](https://docs.outscale.com/en/userguide/About-Cockpit.html) web interface.
 *
 * The version of the OpenAPI document: 1.18
 * Contact: support@outscale.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    CreateVpnConnectionRequest,
    CreateVpnConnectionRequestFromJSON,
    CreateVpnConnectionRequestToJSON,
    CreateVpnConnectionResponse,
    CreateVpnConnectionResponseFromJSON,
    CreateVpnConnectionResponseToJSON,
    CreateVpnConnectionRouteRequest,
    CreateVpnConnectionRouteRequestFromJSON,
    CreateVpnConnectionRouteRequestToJSON,
    CreateVpnConnectionRouteResponse,
    CreateVpnConnectionRouteResponseFromJSON,
    CreateVpnConnectionRouteResponseToJSON,
    DeleteVpnConnectionRequest,
    DeleteVpnConnectionRequestFromJSON,
    DeleteVpnConnectionRequestToJSON,
    DeleteVpnConnectionResponse,
    DeleteVpnConnectionResponseFromJSON,
    DeleteVpnConnectionResponseToJSON,
    DeleteVpnConnectionRouteRequest,
    DeleteVpnConnectionRouteRequestFromJSON,
    DeleteVpnConnectionRouteRequestToJSON,
    DeleteVpnConnectionRouteResponse,
    DeleteVpnConnectionRouteResponseFromJSON,
    DeleteVpnConnectionRouteResponseToJSON,
    ErrorResponse,
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    ReadVpnConnectionsRequest,
    ReadVpnConnectionsRequestFromJSON,
    ReadVpnConnectionsRequestToJSON,
    ReadVpnConnectionsResponse,
    ReadVpnConnectionsResponseFromJSON,
    ReadVpnConnectionsResponseToJSON,
    UpdateVpnConnectionRequest,
    UpdateVpnConnectionRequestFromJSON,
    UpdateVpnConnectionRequestToJSON,
    UpdateVpnConnectionResponse,
    UpdateVpnConnectionResponseFromJSON,
    UpdateVpnConnectionResponseToJSON,
} from '../models';

export interface CreateVpnConnectionOperationRequest {
    createVpnConnectionRequest?: CreateVpnConnectionRequest;
}

export interface CreateVpnConnectionRouteOperationRequest {
    createVpnConnectionRouteRequest?: CreateVpnConnectionRouteRequest;
}

export interface DeleteVpnConnectionOperationRequest {
    deleteVpnConnectionRequest?: DeleteVpnConnectionRequest;
}

export interface DeleteVpnConnectionRouteOperationRequest {
    deleteVpnConnectionRouteRequest?: DeleteVpnConnectionRouteRequest;
}

export interface ReadVpnConnectionsOperationRequest {
    readVpnConnectionsRequest?: ReadVpnConnectionsRequest;
}

export interface UpdateVpnConnectionOperationRequest {
    updateVpnConnectionRequest?: UpdateVpnConnectionRequest;
}

/**
 * VpnConnectionApi - interface
 * 
 * @export
 * @interface VpnConnectionApiInterface
 */
export interface VpnConnectionApiInterface {
    /**
     * 
     * @param {CreateVpnConnectionRequest} [createVpnConnectionRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VpnConnectionApiInterface
     */
    createVpnConnectionRaw(requestParameters: CreateVpnConnectionOperationRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<CreateVpnConnectionResponse>>;

    /**
     */
    createVpnConnection(requestParameters: CreateVpnConnectionOperationRequest, initOverrides?: RequestInit): Promise<CreateVpnConnectionResponse>;

    /**
     * 
     * @param {CreateVpnConnectionRouteRequest} [createVpnConnectionRouteRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VpnConnectionApiInterface
     */
    createVpnConnectionRouteRaw(requestParameters: CreateVpnConnectionRouteOperationRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<CreateVpnConnectionRouteResponse>>;

    /**
     */
    createVpnConnectionRoute(requestParameters: CreateVpnConnectionRouteOperationRequest, initOverrides?: RequestInit): Promise<CreateVpnConnectionRouteResponse>;

    /**
     * 
     * @param {DeleteVpnConnectionRequest} [deleteVpnConnectionRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VpnConnectionApiInterface
     */
    deleteVpnConnectionRaw(requestParameters: DeleteVpnConnectionOperationRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<DeleteVpnConnectionResponse>>;

    /**
     */
    deleteVpnConnection(requestParameters: DeleteVpnConnectionOperationRequest, initOverrides?: RequestInit): Promise<DeleteVpnConnectionResponse>;

    /**
     * 
     * @param {DeleteVpnConnectionRouteRequest} [deleteVpnConnectionRouteRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VpnConnectionApiInterface
     */
    deleteVpnConnectionRouteRaw(requestParameters: DeleteVpnConnectionRouteOperationRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<DeleteVpnConnectionRouteResponse>>;

    /**
     */
    deleteVpnConnectionRoute(requestParameters: DeleteVpnConnectionRouteOperationRequest, initOverrides?: RequestInit): Promise<DeleteVpnConnectionRouteResponse>;

    /**
     * 
     * @param {ReadVpnConnectionsRequest} [readVpnConnectionsRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VpnConnectionApiInterface
     */
    readVpnConnectionsRaw(requestParameters: ReadVpnConnectionsOperationRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<ReadVpnConnectionsResponse>>;

    /**
     */
    readVpnConnections(requestParameters: ReadVpnConnectionsOperationRequest, initOverrides?: RequestInit): Promise<ReadVpnConnectionsResponse>;

    /**
     * 
     * @param {UpdateVpnConnectionRequest} [updateVpnConnectionRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VpnConnectionApiInterface
     */
    updateVpnConnectionRaw(requestParameters: UpdateVpnConnectionOperationRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<UpdateVpnConnectionResponse>>;

    /**
     */
    updateVpnConnection(requestParameters: UpdateVpnConnectionOperationRequest, initOverrides?: RequestInit): Promise<UpdateVpnConnectionResponse>;

}

/**
 * 
 */
export class VpnConnectionApi extends runtime.BaseAPI implements VpnConnectionApiInterface {

    /**
     */
    async createVpnConnectionRaw(requestParameters: CreateVpnConnectionOperationRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<CreateVpnConnectionResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/CreateVpnConnection`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateVpnConnectionRequestToJSON(requestParameters.createVpnConnectionRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreateVpnConnectionResponseFromJSON(jsonValue));
    }

    /**
     */
    async createVpnConnection(requestParameters: CreateVpnConnectionOperationRequest = {}, initOverrides?: RequestInit): Promise<CreateVpnConnectionResponse> {
        const response = await this.createVpnConnectionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async createVpnConnectionRouteRaw(requestParameters: CreateVpnConnectionRouteOperationRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<CreateVpnConnectionRouteResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/CreateVpnConnectionRoute`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateVpnConnectionRouteRequestToJSON(requestParameters.createVpnConnectionRouteRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreateVpnConnectionRouteResponseFromJSON(jsonValue));
    }

    /**
     */
    async createVpnConnectionRoute(requestParameters: CreateVpnConnectionRouteOperationRequest = {}, initOverrides?: RequestInit): Promise<CreateVpnConnectionRouteResponse> {
        const response = await this.createVpnConnectionRouteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async deleteVpnConnectionRaw(requestParameters: DeleteVpnConnectionOperationRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<DeleteVpnConnectionResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/DeleteVpnConnection`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: DeleteVpnConnectionRequestToJSON(requestParameters.deleteVpnConnectionRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DeleteVpnConnectionResponseFromJSON(jsonValue));
    }

    /**
     */
    async deleteVpnConnection(requestParameters: DeleteVpnConnectionOperationRequest = {}, initOverrides?: RequestInit): Promise<DeleteVpnConnectionResponse> {
        const response = await this.deleteVpnConnectionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async deleteVpnConnectionRouteRaw(requestParameters: DeleteVpnConnectionRouteOperationRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<DeleteVpnConnectionRouteResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/DeleteVpnConnectionRoute`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: DeleteVpnConnectionRouteRequestToJSON(requestParameters.deleteVpnConnectionRouteRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DeleteVpnConnectionRouteResponseFromJSON(jsonValue));
    }

    /**
     */
    async deleteVpnConnectionRoute(requestParameters: DeleteVpnConnectionRouteOperationRequest = {}, initOverrides?: RequestInit): Promise<DeleteVpnConnectionRouteResponse> {
        const response = await this.deleteVpnConnectionRouteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async readVpnConnectionsRaw(requestParameters: ReadVpnConnectionsOperationRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<ReadVpnConnectionsResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/ReadVpnConnections`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ReadVpnConnectionsRequestToJSON(requestParameters.readVpnConnectionsRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ReadVpnConnectionsResponseFromJSON(jsonValue));
    }

    /**
     */
    async readVpnConnections(requestParameters: ReadVpnConnectionsOperationRequest = {}, initOverrides?: RequestInit): Promise<ReadVpnConnectionsResponse> {
        const response = await this.readVpnConnectionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async updateVpnConnectionRaw(requestParameters: UpdateVpnConnectionOperationRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<UpdateVpnConnectionResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/UpdateVpnConnection`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateVpnConnectionRequestToJSON(requestParameters.updateVpnConnectionRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UpdateVpnConnectionResponseFromJSON(jsonValue));
    }

    /**
     */
    async updateVpnConnection(requestParameters: UpdateVpnConnectionOperationRequest = {}, initOverrides?: RequestInit): Promise<UpdateVpnConnectionResponse> {
        const response = await this.updateVpnConnectionRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
