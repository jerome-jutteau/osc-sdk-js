/* tslint:disable */
/* eslint-disable */
/**
 * 3DS OUTSCALE API
 * Welcome to the OUTSCALE API documentation.<br /><br />  The OUTSCALE API enables you to manage your resources in the OUTSCALE Cloud. This documentation describes the different actions available along with code examples.<br /><br />  Note that the OUTSCALE Cloud is compatible with Amazon Web Services (AWS) APIs, but some resources have different names in AWS than in the OUTSCALE API. You can find a list of the differences [here](https://docs.outscale.com/en/userguide/OUTSCALE-APIs-Reference.html).<br /><br />  You can also manage your resources using the [Cockpit](https://docs.outscale.com/en/userguide/About-Cockpit.html) web interface.
 *
 * The version of the OpenAPI document: 1.18
 * Contact: support@outscale.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    CreateNetAccessPointRequest,
    CreateNetAccessPointRequestFromJSON,
    CreateNetAccessPointRequestToJSON,
    CreateNetAccessPointResponse,
    CreateNetAccessPointResponseFromJSON,
    CreateNetAccessPointResponseToJSON,
    DeleteNetAccessPointRequest,
    DeleteNetAccessPointRequestFromJSON,
    DeleteNetAccessPointRequestToJSON,
    DeleteNetAccessPointResponse,
    DeleteNetAccessPointResponseFromJSON,
    DeleteNetAccessPointResponseToJSON,
    ReadNetAccessPointServicesRequest,
    ReadNetAccessPointServicesRequestFromJSON,
    ReadNetAccessPointServicesRequestToJSON,
    ReadNetAccessPointServicesResponse,
    ReadNetAccessPointServicesResponseFromJSON,
    ReadNetAccessPointServicesResponseToJSON,
    ReadNetAccessPointsRequest,
    ReadNetAccessPointsRequestFromJSON,
    ReadNetAccessPointsRequestToJSON,
    ReadNetAccessPointsResponse,
    ReadNetAccessPointsResponseFromJSON,
    ReadNetAccessPointsResponseToJSON,
    UpdateNetAccessPointRequest,
    UpdateNetAccessPointRequestFromJSON,
    UpdateNetAccessPointRequestToJSON,
    UpdateNetAccessPointResponse,
    UpdateNetAccessPointResponseFromJSON,
    UpdateNetAccessPointResponseToJSON,
} from '../models';

export interface CreateNetAccessPointOperationRequest {
    createNetAccessPointRequest?: CreateNetAccessPointRequest;
}

export interface DeleteNetAccessPointOperationRequest {
    deleteNetAccessPointRequest?: DeleteNetAccessPointRequest;
}

export interface ReadNetAccessPointServicesOperationRequest {
    readNetAccessPointServicesRequest?: ReadNetAccessPointServicesRequest;
}

export interface ReadNetAccessPointsOperationRequest {
    readNetAccessPointsRequest?: ReadNetAccessPointsRequest;
}

export interface UpdateNetAccessPointOperationRequest {
    updateNetAccessPointRequest?: UpdateNetAccessPointRequest;
}

/**
 * NetAccessPointApi - interface
 * 
 * @export
 * @interface NetAccessPointApiInterface
 */
export interface NetAccessPointApiInterface {
    /**
     * 
     * @param {CreateNetAccessPointRequest} [createNetAccessPointRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NetAccessPointApiInterface
     */
    createNetAccessPointRaw(requestParameters: CreateNetAccessPointOperationRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<CreateNetAccessPointResponse>>;

    /**
     */
    createNetAccessPoint(requestParameters: CreateNetAccessPointOperationRequest, initOverrides?: RequestInit): Promise<CreateNetAccessPointResponse>;

    /**
     * 
     * @param {DeleteNetAccessPointRequest} [deleteNetAccessPointRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NetAccessPointApiInterface
     */
    deleteNetAccessPointRaw(requestParameters: DeleteNetAccessPointOperationRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<DeleteNetAccessPointResponse>>;

    /**
     */
    deleteNetAccessPoint(requestParameters: DeleteNetAccessPointOperationRequest, initOverrides?: RequestInit): Promise<DeleteNetAccessPointResponse>;

    /**
     * 
     * @param {ReadNetAccessPointServicesRequest} [readNetAccessPointServicesRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NetAccessPointApiInterface
     */
    readNetAccessPointServicesRaw(requestParameters: ReadNetAccessPointServicesOperationRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<ReadNetAccessPointServicesResponse>>;

    /**
     */
    readNetAccessPointServices(requestParameters: ReadNetAccessPointServicesOperationRequest, initOverrides?: RequestInit): Promise<ReadNetAccessPointServicesResponse>;

    /**
     * 
     * @param {ReadNetAccessPointsRequest} [readNetAccessPointsRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NetAccessPointApiInterface
     */
    readNetAccessPointsRaw(requestParameters: ReadNetAccessPointsOperationRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<ReadNetAccessPointsResponse>>;

    /**
     */
    readNetAccessPoints(requestParameters: ReadNetAccessPointsOperationRequest, initOverrides?: RequestInit): Promise<ReadNetAccessPointsResponse>;

    /**
     * 
     * @param {UpdateNetAccessPointRequest} [updateNetAccessPointRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NetAccessPointApiInterface
     */
    updateNetAccessPointRaw(requestParameters: UpdateNetAccessPointOperationRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<UpdateNetAccessPointResponse>>;

    /**
     */
    updateNetAccessPoint(requestParameters: UpdateNetAccessPointOperationRequest, initOverrides?: RequestInit): Promise<UpdateNetAccessPointResponse>;

}

/**
 * 
 */
export class NetAccessPointApi extends runtime.BaseAPI implements NetAccessPointApiInterface {

    /**
     */
    async createNetAccessPointRaw(requestParameters: CreateNetAccessPointOperationRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<CreateNetAccessPointResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/CreateNetAccessPoint`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateNetAccessPointRequestToJSON(requestParameters.createNetAccessPointRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreateNetAccessPointResponseFromJSON(jsonValue));
    }

    /**
     */
    async createNetAccessPoint(requestParameters: CreateNetAccessPointOperationRequest = {}, initOverrides?: RequestInit): Promise<CreateNetAccessPointResponse> {
        const response = await this.createNetAccessPointRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async deleteNetAccessPointRaw(requestParameters: DeleteNetAccessPointOperationRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<DeleteNetAccessPointResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/DeleteNetAccessPoint`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: DeleteNetAccessPointRequestToJSON(requestParameters.deleteNetAccessPointRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DeleteNetAccessPointResponseFromJSON(jsonValue));
    }

    /**
     */
    async deleteNetAccessPoint(requestParameters: DeleteNetAccessPointOperationRequest = {}, initOverrides?: RequestInit): Promise<DeleteNetAccessPointResponse> {
        const response = await this.deleteNetAccessPointRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async readNetAccessPointServicesRaw(requestParameters: ReadNetAccessPointServicesOperationRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<ReadNetAccessPointServicesResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/ReadNetAccessPointServices`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ReadNetAccessPointServicesRequestToJSON(requestParameters.readNetAccessPointServicesRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ReadNetAccessPointServicesResponseFromJSON(jsonValue));
    }

    /**
     */
    async readNetAccessPointServices(requestParameters: ReadNetAccessPointServicesOperationRequest = {}, initOverrides?: RequestInit): Promise<ReadNetAccessPointServicesResponse> {
        const response = await this.readNetAccessPointServicesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async readNetAccessPointsRaw(requestParameters: ReadNetAccessPointsOperationRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<ReadNetAccessPointsResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/ReadNetAccessPoints`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ReadNetAccessPointsRequestToJSON(requestParameters.readNetAccessPointsRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ReadNetAccessPointsResponseFromJSON(jsonValue));
    }

    /**
     */
    async readNetAccessPoints(requestParameters: ReadNetAccessPointsOperationRequest = {}, initOverrides?: RequestInit): Promise<ReadNetAccessPointsResponse> {
        const response = await this.readNetAccessPointsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async updateNetAccessPointRaw(requestParameters: UpdateNetAccessPointOperationRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<UpdateNetAccessPointResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/UpdateNetAccessPoint`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateNetAccessPointRequestToJSON(requestParameters.updateNetAccessPointRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UpdateNetAccessPointResponseFromJSON(jsonValue));
    }

    /**
     */
    async updateNetAccessPoint(requestParameters: UpdateNetAccessPointOperationRequest = {}, initOverrides?: RequestInit): Promise<UpdateNetAccessPointResponse> {
        const response = await this.updateNetAccessPointRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
