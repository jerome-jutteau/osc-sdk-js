/* tslint:disable */
/* eslint-disable */
/**
 * 3DS OUTSCALE API
 * Welcome to the OUTSCALE API documentation.<br /><br />  The OUTSCALE API enables you to manage your resources in the OUTSCALE Cloud. This documentation describes the different actions available along with code examples.<br /><br />  Note that the OUTSCALE Cloud is compatible with Amazon Web Services (AWS) APIs, but some resources have different names in AWS than in the OUTSCALE API. You can find a list of the differences [here](https://docs.outscale.com/en/userguide/OUTSCALE-APIs-Reference.html).<br /><br />  You can also manage your resources using the [Cockpit](https://docs.outscale.com/en/userguide/About-Cockpit.html) web interface.
 *
 * The version of the OpenAPI document: 1.18
 * Contact: support@outscale.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import * as runtime from '../runtime';
import { CreateVolumeRequestToJSON, CreateVolumeResponseFromJSON, DeleteVolumeRequestToJSON, DeleteVolumeResponseFromJSON, LinkVolumeRequestToJSON, LinkVolumeResponseFromJSON, ReadVolumesRequestToJSON, ReadVolumesResponseFromJSON, UnlinkVolumeRequestToJSON, UnlinkVolumeResponseFromJSON, UpdateVolumeRequestToJSON, UpdateVolumeResponseFromJSON, } from '../models';
/**
 *
 */
export class VolumeApi extends runtime.BaseAPI {
    /**
     */
    async createVolumeRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }
        const response = await this.request({
            path: `/CreateVolume`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateVolumeRequestToJSON(requestParameters.createVolumeRequest),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => CreateVolumeResponseFromJSON(jsonValue));
    }
    /**
     */
    async createVolume(requestParameters = {}, initOverrides) {
        const response = await this.createVolumeRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     */
    async deleteVolumeRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }
        const response = await this.request({
            path: `/DeleteVolume`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: DeleteVolumeRequestToJSON(requestParameters.deleteVolumeRequest),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => DeleteVolumeResponseFromJSON(jsonValue));
    }
    /**
     */
    async deleteVolume(requestParameters = {}, initOverrides) {
        const response = await this.deleteVolumeRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     */
    async linkVolumeRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }
        const response = await this.request({
            path: `/LinkVolume`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: LinkVolumeRequestToJSON(requestParameters.linkVolumeRequest),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => LinkVolumeResponseFromJSON(jsonValue));
    }
    /**
     */
    async linkVolume(requestParameters = {}, initOverrides) {
        const response = await this.linkVolumeRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     */
    async readVolumesRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }
        const response = await this.request({
            path: `/ReadVolumes`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ReadVolumesRequestToJSON(requestParameters.readVolumesRequest),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => ReadVolumesResponseFromJSON(jsonValue));
    }
    /**
     */
    async readVolumes(requestParameters = {}, initOverrides) {
        const response = await this.readVolumesRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     */
    async unlinkVolumeRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }
        const response = await this.request({
            path: `/UnlinkVolume`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UnlinkVolumeRequestToJSON(requestParameters.unlinkVolumeRequest),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => UnlinkVolumeResponseFromJSON(jsonValue));
    }
    /**
     */
    async unlinkVolume(requestParameters = {}, initOverrides) {
        const response = await this.unlinkVolumeRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     */
    async updateVolumeRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }
        const response = await this.request({
            path: `/UpdateVolume`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateVolumeRequestToJSON(requestParameters.updateVolumeRequest),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => UpdateVolumeResponseFromJSON(jsonValue));
    }
    /**
     */
    async updateVolume(requestParameters = {}, initOverrides) {
        const response = await this.updateVolumeRaw(requestParameters, initOverrides);
        return await response.value();
    }
}
