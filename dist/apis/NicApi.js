/* tslint:disable */
/* eslint-disable */
/**
 * 3DS OUTSCALE API
 * Welcome to the OUTSCALE API documentation.<br /><br />  The OUTSCALE API enables you to manage your resources in the OUTSCALE Cloud. This documentation describes the different actions available along with code examples.<br /><br />  Note that the OUTSCALE Cloud is compatible with Amazon Web Services (AWS) APIs, but some resources have different names in AWS than in the OUTSCALE API. You can find a list of the differences [here](https://docs.outscale.com/en/userguide/OUTSCALE-APIs-Reference.html).<br /><br />  You can also manage your resources using the [Cockpit](https://docs.outscale.com/en/userguide/About-Cockpit.html) web interface.
 *
 * The version of the OpenAPI document: 1.18
 * Contact: support@outscale.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import * as runtime from '../runtime';
import { CreateNicRequestToJSON, CreateNicResponseFromJSON, DeleteNicRequestToJSON, DeleteNicResponseFromJSON, LinkNicRequestToJSON, LinkNicResponseFromJSON, LinkPrivateIpsRequestToJSON, LinkPrivateIpsResponseFromJSON, ReadNicsRequestToJSON, ReadNicsResponseFromJSON, UnlinkNicRequestToJSON, UnlinkNicResponseFromJSON, UnlinkPrivateIpsRequestToJSON, UnlinkPrivateIpsResponseFromJSON, UpdateNicRequestToJSON, UpdateNicResponseFromJSON, } from '../models';
/**
 *
 */
export class NicApi extends runtime.BaseAPI {
    /**
     */
    async createNicRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }
        const response = await this.request({
            path: `/CreateNic`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateNicRequestToJSON(requestParameters.createNicRequest),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => CreateNicResponseFromJSON(jsonValue));
    }
    /**
     */
    async createNic(requestParameters = {}, initOverrides) {
        const response = await this.createNicRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     */
    async deleteNicRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }
        const response = await this.request({
            path: `/DeleteNic`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: DeleteNicRequestToJSON(requestParameters.deleteNicRequest),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => DeleteNicResponseFromJSON(jsonValue));
    }
    /**
     */
    async deleteNic(requestParameters = {}, initOverrides) {
        const response = await this.deleteNicRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     */
    async linkNicRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }
        const response = await this.request({
            path: `/LinkNic`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: LinkNicRequestToJSON(requestParameters.linkNicRequest),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => LinkNicResponseFromJSON(jsonValue));
    }
    /**
     */
    async linkNic(requestParameters = {}, initOverrides) {
        const response = await this.linkNicRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     */
    async linkPrivateIpsRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }
        const response = await this.request({
            path: `/LinkPrivateIps`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: LinkPrivateIpsRequestToJSON(requestParameters.linkPrivateIpsRequest),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => LinkPrivateIpsResponseFromJSON(jsonValue));
    }
    /**
     */
    async linkPrivateIps(requestParameters = {}, initOverrides) {
        const response = await this.linkPrivateIpsRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     */
    async readNicsRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }
        const response = await this.request({
            path: `/ReadNics`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ReadNicsRequestToJSON(requestParameters.readNicsRequest),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => ReadNicsResponseFromJSON(jsonValue));
    }
    /**
     */
    async readNics(requestParameters = {}, initOverrides) {
        const response = await this.readNicsRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     */
    async unlinkNicRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }
        const response = await this.request({
            path: `/UnlinkNic`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UnlinkNicRequestToJSON(requestParameters.unlinkNicRequest),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => UnlinkNicResponseFromJSON(jsonValue));
    }
    /**
     */
    async unlinkNic(requestParameters = {}, initOverrides) {
        const response = await this.unlinkNicRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     */
    async unlinkPrivateIpsRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }
        const response = await this.request({
            path: `/UnlinkPrivateIps`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UnlinkPrivateIpsRequestToJSON(requestParameters.unlinkPrivateIpsRequest),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => UnlinkPrivateIpsResponseFromJSON(jsonValue));
    }
    /**
     */
    async unlinkPrivateIps(requestParameters = {}, initOverrides) {
        const response = await this.unlinkPrivateIpsRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     */
    async updateNicRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }
        const response = await this.request({
            path: `/UpdateNic`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateNicRequestToJSON(requestParameters.updateNicRequest),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => UpdateNicResponseFromJSON(jsonValue));
    }
    /**
     */
    async updateNic(requestParameters = {}, initOverrides) {
        const response = await this.updateNicRaw(requestParameters, initOverrides);
        return await response.value();
    }
}
