/* tslint:disable */
/* eslint-disable */
/**
 * 3DS OUTSCALE API
 * Welcome to the OUTSCALE API documentation.<br /><br />  The OUTSCALE API enables you to manage your resources in the OUTSCALE Cloud. This documentation describes the different actions available along with code examples.<br /><br />  Note that the OUTSCALE Cloud is compatible with Amazon Web Services (AWS) APIs, but some resources have different names in AWS than in the OUTSCALE API. You can find a list of the differences [here](https://docs.outscale.com/en/userguide/OUTSCALE-APIs-Reference.html).<br /><br />  You can also manage your resources using the [Cockpit](https://docs.outscale.com/en/userguide/About-Cockpit.html) web interface.
 *
 * The version of the OpenAPI document: 1.18
 * Contact: support@outscale.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import * as runtime from '../runtime';
import { CreateLoadBalancerRequestToJSON, CreateLoadBalancerResponseFromJSON, CreateLoadBalancerTagsRequestToJSON, CreateLoadBalancerTagsResponseFromJSON, DeleteLoadBalancerRequestToJSON, DeleteLoadBalancerResponseFromJSON, DeleteLoadBalancerTagsRequestToJSON, DeleteLoadBalancerTagsResponseFromJSON, DeregisterVmsInLoadBalancerRequestToJSON, DeregisterVmsInLoadBalancerResponseFromJSON, LinkLoadBalancerBackendMachinesRequestToJSON, LinkLoadBalancerBackendMachinesResponseFromJSON, ReadLoadBalancerTagsRequestToJSON, ReadLoadBalancerTagsResponseFromJSON, ReadLoadBalancersRequestToJSON, ReadLoadBalancersResponseFromJSON, ReadVmsHealthRequestToJSON, ReadVmsHealthResponseFromJSON, RegisterVmsInLoadBalancerRequestToJSON, RegisterVmsInLoadBalancerResponseFromJSON, UnlinkLoadBalancerBackendMachinesRequestToJSON, UnlinkLoadBalancerBackendMachinesResponseFromJSON, UpdateLoadBalancerRequestToJSON, UpdateLoadBalancerResponseFromJSON, } from '../models';
/**
 *
 */
export class LoadBalancerApi extends runtime.BaseAPI {
    /**
     */
    async createLoadBalancerRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }
        const response = await this.request({
            path: `/CreateLoadBalancer`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateLoadBalancerRequestToJSON(requestParameters.createLoadBalancerRequest),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => CreateLoadBalancerResponseFromJSON(jsonValue));
    }
    /**
     */
    async createLoadBalancer(requestParameters = {}, initOverrides) {
        const response = await this.createLoadBalancerRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     */
    async createLoadBalancerTagsRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }
        const response = await this.request({
            path: `/CreateLoadBalancerTags`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateLoadBalancerTagsRequestToJSON(requestParameters.createLoadBalancerTagsRequest),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => CreateLoadBalancerTagsResponseFromJSON(jsonValue));
    }
    /**
     */
    async createLoadBalancerTags(requestParameters = {}, initOverrides) {
        const response = await this.createLoadBalancerTagsRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     */
    async deleteLoadBalancerRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }
        const response = await this.request({
            path: `/DeleteLoadBalancer`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: DeleteLoadBalancerRequestToJSON(requestParameters.deleteLoadBalancerRequest),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => DeleteLoadBalancerResponseFromJSON(jsonValue));
    }
    /**
     */
    async deleteLoadBalancer(requestParameters = {}, initOverrides) {
        const response = await this.deleteLoadBalancerRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     */
    async deleteLoadBalancerTagsRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }
        const response = await this.request({
            path: `/DeleteLoadBalancerTags`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: DeleteLoadBalancerTagsRequestToJSON(requestParameters.deleteLoadBalancerTagsRequest),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => DeleteLoadBalancerTagsResponseFromJSON(jsonValue));
    }
    /**
     */
    async deleteLoadBalancerTags(requestParameters = {}, initOverrides) {
        const response = await this.deleteLoadBalancerTagsRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     */
    async deregisterVmsInLoadBalancerRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }
        const response = await this.request({
            path: `/DeregisterVmsInLoadBalancer`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: DeregisterVmsInLoadBalancerRequestToJSON(requestParameters.deregisterVmsInLoadBalancerRequest),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => DeregisterVmsInLoadBalancerResponseFromJSON(jsonValue));
    }
    /**
     */
    async deregisterVmsInLoadBalancer(requestParameters = {}, initOverrides) {
        const response = await this.deregisterVmsInLoadBalancerRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     */
    async linkLoadBalancerBackendMachinesRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }
        const response = await this.request({
            path: `/LinkLoadBalancerBackendMachines`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: LinkLoadBalancerBackendMachinesRequestToJSON(requestParameters.linkLoadBalancerBackendMachinesRequest),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => LinkLoadBalancerBackendMachinesResponseFromJSON(jsonValue));
    }
    /**
     */
    async linkLoadBalancerBackendMachines(requestParameters = {}, initOverrides) {
        const response = await this.linkLoadBalancerBackendMachinesRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     */
    async readLoadBalancerTagsRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }
        const response = await this.request({
            path: `/ReadLoadBalancerTags`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ReadLoadBalancerTagsRequestToJSON(requestParameters.readLoadBalancerTagsRequest),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => ReadLoadBalancerTagsResponseFromJSON(jsonValue));
    }
    /**
     */
    async readLoadBalancerTags(requestParameters = {}, initOverrides) {
        const response = await this.readLoadBalancerTagsRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     */
    async readLoadBalancersRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }
        const response = await this.request({
            path: `/ReadLoadBalancers`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ReadLoadBalancersRequestToJSON(requestParameters.readLoadBalancersRequest),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => ReadLoadBalancersResponseFromJSON(jsonValue));
    }
    /**
     */
    async readLoadBalancers(requestParameters = {}, initOverrides) {
        const response = await this.readLoadBalancersRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     */
    async readVmsHealthRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }
        const response = await this.request({
            path: `/ReadVmsHealth`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ReadVmsHealthRequestToJSON(requestParameters.readVmsHealthRequest),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => ReadVmsHealthResponseFromJSON(jsonValue));
    }
    /**
     */
    async readVmsHealth(requestParameters = {}, initOverrides) {
        const response = await this.readVmsHealthRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     */
    async registerVmsInLoadBalancerRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }
        const response = await this.request({
            path: `/RegisterVmsInLoadBalancer`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RegisterVmsInLoadBalancerRequestToJSON(requestParameters.registerVmsInLoadBalancerRequest),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => RegisterVmsInLoadBalancerResponseFromJSON(jsonValue));
    }
    /**
     */
    async registerVmsInLoadBalancer(requestParameters = {}, initOverrides) {
        const response = await this.registerVmsInLoadBalancerRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     */
    async unlinkLoadBalancerBackendMachinesRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }
        const response = await this.request({
            path: `/UnlinkLoadBalancerBackendMachines`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UnlinkLoadBalancerBackendMachinesRequestToJSON(requestParameters.unlinkLoadBalancerBackendMachinesRequest),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => UnlinkLoadBalancerBackendMachinesResponseFromJSON(jsonValue));
    }
    /**
     */
    async unlinkLoadBalancerBackendMachines(requestParameters = {}, initOverrides) {
        const response = await this.unlinkLoadBalancerBackendMachinesRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     */
    async updateLoadBalancerRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }
        const response = await this.request({
            path: `/UpdateLoadBalancer`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateLoadBalancerRequestToJSON(requestParameters.updateLoadBalancerRequest),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => UpdateLoadBalancerResponseFromJSON(jsonValue));
    }
    /**
     */
    async updateLoadBalancer(requestParameters = {}, initOverrides) {
        const response = await this.updateLoadBalancerRaw(requestParameters, initOverrides);
        return await response.value();
    }
}
