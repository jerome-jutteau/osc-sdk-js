/* tslint:disable */
/* eslint-disable */
/**
 * 3DS OUTSCALE API
 * Welcome to the OUTSCALE API documentation.<br /><br />  The OUTSCALE API enables you to manage your resources in the OUTSCALE Cloud. This documentation describes the different actions available along with code examples.<br /><br />  Note that the OUTSCALE Cloud is compatible with Amazon Web Services (AWS) APIs, but some resources have different names in AWS than in the OUTSCALE API. You can find a list of the differences [here](https://docs.outscale.com/en/userguide/OUTSCALE-APIs-Reference.html).<br /><br />  You can also manage your resources using the [Cockpit](https://docs.outscale.com/en/userguide/About-Cockpit.html) web interface.
 *
 * The version of the OpenAPI document: 1.18
 * Contact: support@outscale.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import * as runtime from '../runtime';
import { CreateNetRequestToJSON, CreateNetResponseFromJSON, DeleteNetRequestToJSON, DeleteNetResponseFromJSON, ReadNetsRequestToJSON, ReadNetsResponseFromJSON, UpdateNetRequestToJSON, UpdateNetResponseFromJSON, } from '../models';
/**
 *
 */
export class NetApi extends runtime.BaseAPI {
    /**
     */
    async createNetRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }
        const response = await this.request({
            path: `/CreateNet`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateNetRequestToJSON(requestParameters.createNetRequest),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => CreateNetResponseFromJSON(jsonValue));
    }
    /**
     */
    async createNet(requestParameters = {}, initOverrides) {
        const response = await this.createNetRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     */
    async deleteNetRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }
        const response = await this.request({
            path: `/DeleteNet`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: DeleteNetRequestToJSON(requestParameters.deleteNetRequest),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => DeleteNetResponseFromJSON(jsonValue));
    }
    /**
     */
    async deleteNet(requestParameters = {}, initOverrides) {
        const response = await this.deleteNetRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     */
    async readNetsRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }
        const response = await this.request({
            path: `/ReadNets`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ReadNetsRequestToJSON(requestParameters.readNetsRequest),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => ReadNetsResponseFromJSON(jsonValue));
    }
    /**
     */
    async readNets(requestParameters = {}, initOverrides) {
        const response = await this.readNetsRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     */
    async updateNetRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }
        const response = await this.request({
            path: `/UpdateNet`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateNetRequestToJSON(requestParameters.updateNetRequest),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => UpdateNetResponseFromJSON(jsonValue));
    }
    /**
     */
    async updateNet(requestParameters = {}, initOverrides) {
        const response = await this.updateNetRaw(requestParameters, initOverrides);
        return await response.value();
    }
}
