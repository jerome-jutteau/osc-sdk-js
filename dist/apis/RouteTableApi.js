/* tslint:disable */
/* eslint-disable */
/**
 * 3DS OUTSCALE API
 * Welcome to the OUTSCALE API documentation.<br /><br />  The OUTSCALE API enables you to manage your resources in the OUTSCALE Cloud. This documentation describes the different actions available along with code examples.<br /><br />  Note that the OUTSCALE Cloud is compatible with Amazon Web Services (AWS) APIs, but some resources have different names in AWS than in the OUTSCALE API. You can find a list of the differences [here](https://docs.outscale.com/en/userguide/OUTSCALE-APIs-Reference.html).<br /><br />  You can also manage your resources using the [Cockpit](https://docs.outscale.com/en/userguide/About-Cockpit.html) web interface.
 *
 * The version of the OpenAPI document: 1.18
 * Contact: support@outscale.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import * as runtime from '../runtime.js';
import { CreateRouteTableRequestToJSON, CreateRouteTableResponseFromJSON, DeleteRouteTableRequestToJSON, DeleteRouteTableResponseFromJSON, LinkRouteTableRequestToJSON, LinkRouteTableResponseFromJSON, ReadRouteTablesRequestToJSON, ReadRouteTablesResponseFromJSON, UnlinkRouteTableRequestToJSON, UnlinkRouteTableResponseFromJSON, } from '../models/index.js';
/**
 *
 */
export class RouteTableApi extends runtime.BaseAPI {
    /**
     */
    createRouteTableRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
            }
            const response = yield this.request({
                path: `/CreateRouteTable`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: CreateRouteTableRequestToJSON(requestParameters.createRouteTableRequest),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => CreateRouteTableResponseFromJSON(jsonValue));
        });
    }
    /**
     */
    createRouteTable(requestParameters = {}, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.createRouteTableRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    deleteRouteTableRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
            }
            const response = yield this.request({
                path: `/DeleteRouteTable`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: DeleteRouteTableRequestToJSON(requestParameters.deleteRouteTableRequest),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => DeleteRouteTableResponseFromJSON(jsonValue));
        });
    }
    /**
     */
    deleteRouteTable(requestParameters = {}, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.deleteRouteTableRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    linkRouteTableRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
            }
            const response = yield this.request({
                path: `/LinkRouteTable`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: LinkRouteTableRequestToJSON(requestParameters.linkRouteTableRequest),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => LinkRouteTableResponseFromJSON(jsonValue));
        });
    }
    /**
     */
    linkRouteTable(requestParameters = {}, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.linkRouteTableRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    readRouteTablesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
            }
            const response = yield this.request({
                path: `/ReadRouteTables`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: ReadRouteTablesRequestToJSON(requestParameters.readRouteTablesRequest),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => ReadRouteTablesResponseFromJSON(jsonValue));
        });
    }
    /**
     */
    readRouteTables(requestParameters = {}, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.readRouteTablesRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    unlinkRouteTableRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
            }
            const response = yield this.request({
                path: `/UnlinkRouteTable`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: UnlinkRouteTableRequestToJSON(requestParameters.unlinkRouteTableRequest),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => UnlinkRouteTableResponseFromJSON(jsonValue));
        });
    }
    /**
     */
    unlinkRouteTable(requestParameters = {}, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.unlinkRouteTableRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
}
