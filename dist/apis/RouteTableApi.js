/* tslint:disable */
/* eslint-disable */
/**
 * 3DS OUTSCALE API
 * Welcome to the OUTSCALE API documentation.<br /><br />  The OUTSCALE API enables you to manage your resources in the OUTSCALE Cloud. This documentation describes the different actions available along with code examples.<br /><br />  Note that the OUTSCALE Cloud is compatible with Amazon Web Services (AWS) APIs, but some resources have different names in AWS than in the OUTSCALE API. You can find a list of the differences [here](https://docs.outscale.com/en/userguide/OUTSCALE-APIs-Reference.html).<br /><br />  You can also manage your resources using the [Cockpit](https://docs.outscale.com/en/userguide/About-Cockpit.html) web interface.
 *
 * The version of the OpenAPI document: 1.18
 * Contact: support@outscale.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import * as runtime from '../runtime';
import { CreateRouteTableRequestToJSON, CreateRouteTableResponseFromJSON, DeleteRouteTableRequestToJSON, DeleteRouteTableResponseFromJSON, LinkRouteTableRequestToJSON, LinkRouteTableResponseFromJSON, ReadRouteTablesRequestToJSON, ReadRouteTablesResponseFromJSON, UnlinkRouteTableRequestToJSON, UnlinkRouteTableResponseFromJSON, } from '../models';
/**
 *
 */
export class RouteTableApi extends runtime.BaseAPI {
    /**
     */
    async createRouteTableRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }
        const response = await this.request({
            path: `/CreateRouteTable`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateRouteTableRequestToJSON(requestParameters.createRouteTableRequest),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => CreateRouteTableResponseFromJSON(jsonValue));
    }
    /**
     */
    async createRouteTable(requestParameters = {}, initOverrides) {
        const response = await this.createRouteTableRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     */
    async deleteRouteTableRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }
        const response = await this.request({
            path: `/DeleteRouteTable`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: DeleteRouteTableRequestToJSON(requestParameters.deleteRouteTableRequest),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => DeleteRouteTableResponseFromJSON(jsonValue));
    }
    /**
     */
    async deleteRouteTable(requestParameters = {}, initOverrides) {
        const response = await this.deleteRouteTableRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     */
    async linkRouteTableRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }
        const response = await this.request({
            path: `/LinkRouteTable`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: LinkRouteTableRequestToJSON(requestParameters.linkRouteTableRequest),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => LinkRouteTableResponseFromJSON(jsonValue));
    }
    /**
     */
    async linkRouteTable(requestParameters = {}, initOverrides) {
        const response = await this.linkRouteTableRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     */
    async readRouteTablesRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }
        const response = await this.request({
            path: `/ReadRouteTables`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ReadRouteTablesRequestToJSON(requestParameters.readRouteTablesRequest),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => ReadRouteTablesResponseFromJSON(jsonValue));
    }
    /**
     */
    async readRouteTables(requestParameters = {}, initOverrides) {
        const response = await this.readRouteTablesRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     */
    async unlinkRouteTableRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }
        const response = await this.request({
            path: `/UnlinkRouteTable`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UnlinkRouteTableRequestToJSON(requestParameters.unlinkRouteTableRequest),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => UnlinkRouteTableResponseFromJSON(jsonValue));
    }
    /**
     */
    async unlinkRouteTable(requestParameters = {}, initOverrides) {
        const response = await this.unlinkRouteTableRaw(requestParameters, initOverrides);
        return await response.value();
    }
}
