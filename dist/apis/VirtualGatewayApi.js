/* tslint:disable */
/* eslint-disable */
/**
 * 3DS OUTSCALE API
 * Welcome to the OUTSCALE API documentation.<br /><br />  The OUTSCALE API enables you to manage your resources in the OUTSCALE Cloud. This documentation describes the different actions available along with code examples.<br /><br />  Note that the OUTSCALE Cloud is compatible with Amazon Web Services (AWS) APIs, but some resources have different names in AWS than in the OUTSCALE API. You can find a list of the differences [here](https://docs.outscale.com/en/userguide/OUTSCALE-APIs-Reference.html).<br /><br />  You can also manage your resources using the [Cockpit](https://docs.outscale.com/en/userguide/About-Cockpit.html) web interface.
 *
 * The version of the OpenAPI document: 1.18
 * Contact: support@outscale.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import * as runtime from '../runtime';
import { CreateVirtualGatewayRequestToJSON, CreateVirtualGatewayResponseFromJSON, DeleteVirtualGatewayRequestToJSON, DeleteVirtualGatewayResponseFromJSON, LinkVirtualGatewayRequestToJSON, LinkVirtualGatewayResponseFromJSON, ReadVirtualGatewaysRequestToJSON, ReadVirtualGatewaysResponseFromJSON, UnlinkVirtualGatewayRequestToJSON, UnlinkVirtualGatewayResponseFromJSON, UpdateRoutePropagationRequestToJSON, UpdateRoutePropagationResponseFromJSON, } from '../models';
/**
 *
 */
export class VirtualGatewayApi extends runtime.BaseAPI {
    /**
     */
    async createVirtualGatewayRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }
        const response = await this.request({
            path: `/CreateVirtualGateway`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateVirtualGatewayRequestToJSON(requestParameters.createVirtualGatewayRequest),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => CreateVirtualGatewayResponseFromJSON(jsonValue));
    }
    /**
     */
    async createVirtualGateway(requestParameters = {}, initOverrides) {
        const response = await this.createVirtualGatewayRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     */
    async deleteVirtualGatewayRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }
        const response = await this.request({
            path: `/DeleteVirtualGateway`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: DeleteVirtualGatewayRequestToJSON(requestParameters.deleteVirtualGatewayRequest),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => DeleteVirtualGatewayResponseFromJSON(jsonValue));
    }
    /**
     */
    async deleteVirtualGateway(requestParameters = {}, initOverrides) {
        const response = await this.deleteVirtualGatewayRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     */
    async linkVirtualGatewayRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }
        const response = await this.request({
            path: `/LinkVirtualGateway`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: LinkVirtualGatewayRequestToJSON(requestParameters.linkVirtualGatewayRequest),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => LinkVirtualGatewayResponseFromJSON(jsonValue));
    }
    /**
     */
    async linkVirtualGateway(requestParameters = {}, initOverrides) {
        const response = await this.linkVirtualGatewayRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     */
    async readVirtualGatewaysRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }
        const response = await this.request({
            path: `/ReadVirtualGateways`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ReadVirtualGatewaysRequestToJSON(requestParameters.readVirtualGatewaysRequest),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => ReadVirtualGatewaysResponseFromJSON(jsonValue));
    }
    /**
     */
    async readVirtualGateways(requestParameters = {}, initOverrides) {
        const response = await this.readVirtualGatewaysRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     */
    async unlinkVirtualGatewayRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }
        const response = await this.request({
            path: `/UnlinkVirtualGateway`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UnlinkVirtualGatewayRequestToJSON(requestParameters.unlinkVirtualGatewayRequest),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => UnlinkVirtualGatewayResponseFromJSON(jsonValue));
    }
    /**
     */
    async unlinkVirtualGateway(requestParameters = {}, initOverrides) {
        const response = await this.unlinkVirtualGatewayRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     */
    async updateRoutePropagationRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }
        const response = await this.request({
            path: `/UpdateRoutePropagation`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateRoutePropagationRequestToJSON(requestParameters.updateRoutePropagationRequest),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => UpdateRoutePropagationResponseFromJSON(jsonValue));
    }
    /**
     */
    async updateRoutePropagation(requestParameters = {}, initOverrides) {
        const response = await this.updateRoutePropagationRaw(requestParameters, initOverrides);
        return await response.value();
    }
}
