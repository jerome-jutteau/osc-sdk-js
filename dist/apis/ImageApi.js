/* tslint:disable */
/* eslint-disable */
/**
 * 3DS OUTSCALE API
 * Welcome to the OUTSCALE API documentation.<br /><br />  The OUTSCALE API enables you to manage your resources in the OUTSCALE Cloud. This documentation describes the different actions available along with code examples.<br /><br />  Note that the OUTSCALE Cloud is compatible with Amazon Web Services (AWS) APIs, but some resources have different names in AWS than in the OUTSCALE API. You can find a list of the differences [here](https://docs.outscale.com/en/userguide/OUTSCALE-APIs-Reference.html).<br /><br />  You can also manage your resources using the [Cockpit](https://docs.outscale.com/en/userguide/About-Cockpit.html) web interface.
 *
 * The version of the OpenAPI document: 1.18
 * Contact: support@outscale.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import * as runtime from '../runtime';
import { CreateImageExportTaskRequestToJSON, CreateImageExportTaskResponseFromJSON, CreateImageRequestToJSON, CreateImageResponseFromJSON, DeleteImageRequestToJSON, DeleteImageResponseFromJSON, ReadImageExportTasksRequestToJSON, ReadImageExportTasksResponseFromJSON, ReadImagesRequestToJSON, ReadImagesResponseFromJSON, UpdateImageRequestToJSON, UpdateImageResponseFromJSON, } from '../models';
/**
 *
 */
export class ImageApi extends runtime.BaseAPI {
    /**
     */
    async createImageRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }
        const response = await this.request({
            path: `/CreateImage`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateImageRequestToJSON(requestParameters.createImageRequest),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => CreateImageResponseFromJSON(jsonValue));
    }
    /**
     */
    async createImage(requestParameters = {}, initOverrides) {
        const response = await this.createImageRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     */
    async createImageExportTaskRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }
        const response = await this.request({
            path: `/CreateImageExportTask`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateImageExportTaskRequestToJSON(requestParameters.createImageExportTaskRequest),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => CreateImageExportTaskResponseFromJSON(jsonValue));
    }
    /**
     */
    async createImageExportTask(requestParameters = {}, initOverrides) {
        const response = await this.createImageExportTaskRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     */
    async deleteImageRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }
        const response = await this.request({
            path: `/DeleteImage`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: DeleteImageRequestToJSON(requestParameters.deleteImageRequest),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => DeleteImageResponseFromJSON(jsonValue));
    }
    /**
     */
    async deleteImage(requestParameters = {}, initOverrides) {
        const response = await this.deleteImageRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     */
    async readImageExportTasksRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }
        const response = await this.request({
            path: `/ReadImageExportTasks`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ReadImageExportTasksRequestToJSON(requestParameters.readImageExportTasksRequest),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => ReadImageExportTasksResponseFromJSON(jsonValue));
    }
    /**
     */
    async readImageExportTasks(requestParameters = {}, initOverrides) {
        const response = await this.readImageExportTasksRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     */
    async readImagesRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }
        const response = await this.request({
            path: `/ReadImages`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ReadImagesRequestToJSON(requestParameters.readImagesRequest),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => ReadImagesResponseFromJSON(jsonValue));
    }
    /**
     */
    async readImages(requestParameters = {}, initOverrides) {
        const response = await this.readImagesRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     */
    async updateImageRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }
        const response = await this.request({
            path: `/UpdateImage`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateImageRequestToJSON(requestParameters.updateImageRequest),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => UpdateImageResponseFromJSON(jsonValue));
    }
    /**
     */
    async updateImage(requestParameters = {}, initOverrides) {
        const response = await this.updateImageRaw(requestParameters, initOverrides);
        return await response.value();
    }
}
