/* tslint:disable */
/* eslint-disable */
/**
 * 3DS OUTSCALE API
 * Welcome to the OUTSCALE API documentation.<br /><br />  The OUTSCALE API enables you to manage your resources in the OUTSCALE Cloud. This documentation describes the different actions available along with code examples.<br /><br />  Note that the OUTSCALE Cloud is compatible with Amazon Web Services (AWS) APIs, but some resources have different names in AWS than in the OUTSCALE API. You can find a list of the differences [here](https://docs.outscale.com/en/userguide/OUTSCALE-APIs-Reference.html).<br /><br />  You can also manage your resources using the [Cockpit](https://docs.outscale.com/en/userguide/About-Cockpit.html) web interface.
 *
 * The version of the OpenAPI document: 1.18
 * Contact: support@outscale.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import * as runtime from '../runtime';
import { ReadApiAccessPolicyRequestToJSON, ReadApiAccessPolicyResponseFromJSON, UpdateApiAccessPolicyRequestToJSON, UpdateApiAccessPolicyResponseFromJSON, } from '../models';
/**
 *
 */
export class ApiAccessPolicyApi extends runtime.BaseAPI {
    /**
     */
    async readApiAccessPolicyRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKeyAuthSec authentication
        }
        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/ReadApiAccessPolicy`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ReadApiAccessPolicyRequestToJSON(requestParameters.readApiAccessPolicyRequest),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => ReadApiAccessPolicyResponseFromJSON(jsonValue));
    }
    /**
     */
    async readApiAccessPolicy(requestParameters = {}, initOverrides) {
        const response = await this.readApiAccessPolicyRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     */
    async updateApiAccessPolicyRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKeyAuthSec authentication
        }
        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/UpdateApiAccessPolicy`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateApiAccessPolicyRequestToJSON(requestParameters.updateApiAccessPolicyRequest),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => UpdateApiAccessPolicyResponseFromJSON(jsonValue));
    }
    /**
     */
    async updateApiAccessPolicy(requestParameters = {}, initOverrides) {
        const response = await this.updateApiAccessPolicyRaw(requestParameters, initOverrides);
        return await response.value();
    }
}
