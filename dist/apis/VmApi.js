/* tslint:disable */
/* eslint-disable */
/**
 * 3DS OUTSCALE API
 * Welcome to the OUTSCALE API documentation.<br /><br />  The OUTSCALE API enables you to manage your resources in the OUTSCALE Cloud. This documentation describes the different actions available along with code examples.<br /><br />  Note that the OUTSCALE Cloud is compatible with Amazon Web Services (AWS) APIs, but some resources have different names in AWS than in the OUTSCALE API. You can find a list of the differences [here](https://docs.outscale.com/en/userguide/OUTSCALE-APIs-Reference.html).<br /><br />  You can also manage your resources using the [Cockpit](https://docs.outscale.com/en/userguide/About-Cockpit.html) web interface.
 *
 * The version of the OpenAPI document: 1.18
 * Contact: support@outscale.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import * as runtime from '../runtime';
import { CreateVmsRequestToJSON, CreateVmsResponseFromJSON, DeleteVmsRequestToJSON, DeleteVmsResponseFromJSON, ReadAdminPasswordRequestToJSON, ReadAdminPasswordResponseFromJSON, ReadConsoleOutputRequestToJSON, ReadConsoleOutputResponseFromJSON, ReadVmTypesRequestToJSON, ReadVmTypesResponseFromJSON, ReadVmsRequestToJSON, ReadVmsResponseFromJSON, ReadVmsStateRequestToJSON, ReadVmsStateResponseFromJSON, RebootVmsRequestToJSON, RebootVmsResponseFromJSON, StartVmsRequestToJSON, StartVmsResponseFromJSON, StopVmsRequestToJSON, StopVmsResponseFromJSON, UpdateVmRequestToJSON, UpdateVmResponseFromJSON, } from '../models';
/**
 *
 */
export class VmApi extends runtime.BaseAPI {
    /**
     */
    async createVmsRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }
        const response = await this.request({
            path: `/CreateVms`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateVmsRequestToJSON(requestParameters.createVmsRequest),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => CreateVmsResponseFromJSON(jsonValue));
    }
    /**
     */
    async createVms(requestParameters = {}, initOverrides) {
        const response = await this.createVmsRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     */
    async deleteVmsRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }
        const response = await this.request({
            path: `/DeleteVms`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: DeleteVmsRequestToJSON(requestParameters.deleteVmsRequest),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => DeleteVmsResponseFromJSON(jsonValue));
    }
    /**
     */
    async deleteVms(requestParameters = {}, initOverrides) {
        const response = await this.deleteVmsRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     */
    async readAdminPasswordRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }
        const response = await this.request({
            path: `/ReadAdminPassword`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ReadAdminPasswordRequestToJSON(requestParameters.readAdminPasswordRequest),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => ReadAdminPasswordResponseFromJSON(jsonValue));
    }
    /**
     */
    async readAdminPassword(requestParameters = {}, initOverrides) {
        const response = await this.readAdminPasswordRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     */
    async readConsoleOutputRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }
        const response = await this.request({
            path: `/ReadConsoleOutput`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ReadConsoleOutputRequestToJSON(requestParameters.readConsoleOutputRequest),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => ReadConsoleOutputResponseFromJSON(jsonValue));
    }
    /**
     */
    async readConsoleOutput(requestParameters = {}, initOverrides) {
        const response = await this.readConsoleOutputRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     */
    async readVmTypesRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        const response = await this.request({
            path: `/ReadVmTypes`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ReadVmTypesRequestToJSON(requestParameters.readVmTypesRequest),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => ReadVmTypesResponseFromJSON(jsonValue));
    }
    /**
     */
    async readVmTypes(requestParameters = {}, initOverrides) {
        const response = await this.readVmTypesRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     */
    async readVmsRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }
        const response = await this.request({
            path: `/ReadVms`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ReadVmsRequestToJSON(requestParameters.readVmsRequest),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => ReadVmsResponseFromJSON(jsonValue));
    }
    /**
     */
    async readVms(requestParameters = {}, initOverrides) {
        const response = await this.readVmsRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     */
    async readVmsStateRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }
        const response = await this.request({
            path: `/ReadVmsState`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ReadVmsStateRequestToJSON(requestParameters.readVmsStateRequest),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => ReadVmsStateResponseFromJSON(jsonValue));
    }
    /**
     */
    async readVmsState(requestParameters = {}, initOverrides) {
        const response = await this.readVmsStateRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     */
    async rebootVmsRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }
        const response = await this.request({
            path: `/RebootVms`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RebootVmsRequestToJSON(requestParameters.rebootVmsRequest),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => RebootVmsResponseFromJSON(jsonValue));
    }
    /**
     */
    async rebootVms(requestParameters = {}, initOverrides) {
        const response = await this.rebootVmsRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     */
    async startVmsRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }
        const response = await this.request({
            path: `/StartVms`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: StartVmsRequestToJSON(requestParameters.startVmsRequest),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => StartVmsResponseFromJSON(jsonValue));
    }
    /**
     */
    async startVms(requestParameters = {}, initOverrides) {
        const response = await this.startVmsRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     */
    async stopVmsRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }
        const response = await this.request({
            path: `/StopVms`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: StopVmsRequestToJSON(requestParameters.stopVmsRequest),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => StopVmsResponseFromJSON(jsonValue));
    }
    /**
     */
    async stopVms(requestParameters = {}, initOverrides) {
        const response = await this.stopVmsRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     */
    async updateVmRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }
        const response = await this.request({
            path: `/UpdateVm`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateVmRequestToJSON(requestParameters.updateVmRequest),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => UpdateVmResponseFromJSON(jsonValue));
    }
    /**
     */
    async updateVm(requestParameters = {}, initOverrides) {
        const response = await this.updateVmRaw(requestParameters, initOverrides);
        return await response.value();
    }
}
