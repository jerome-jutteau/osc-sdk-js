/* tslint:disable */
/* eslint-disable */
/**
 * 3DS OUTSCALE API
 * Welcome to the OUTSCALE API documentation.<br /><br />  The OUTSCALE API enables you to manage your resources in the OUTSCALE Cloud. This documentation describes the different actions available along with code examples.<br /><br />  Note that the OUTSCALE Cloud is compatible with Amazon Web Services (AWS) APIs, but some resources have different names in AWS than in the OUTSCALE API. You can find a list of the differences [here](https://docs.outscale.com/en/userguide/OUTSCALE-APIs-Reference.html).<br /><br />  You can also manage your resources using the [Cockpit](https://docs.outscale.com/en/userguide/About-Cockpit.html) web interface.
 *
 * The version of the OpenAPI document: 1.18
 * Contact: support@outscale.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import * as runtime from '../runtime';
import { CreateVmsRequestToJSON, CreateVmsResponseFromJSON, DeleteVmsRequestToJSON, DeleteVmsResponseFromJSON, ReadAdminPasswordRequestToJSON, ReadAdminPasswordResponseFromJSON, ReadConsoleOutputRequestToJSON, ReadConsoleOutputResponseFromJSON, ReadVmTypesRequestToJSON, ReadVmTypesResponseFromJSON, ReadVmsRequestToJSON, ReadVmsResponseFromJSON, ReadVmsStateRequestToJSON, ReadVmsStateResponseFromJSON, RebootVmsRequestToJSON, RebootVmsResponseFromJSON, StartVmsRequestToJSON, StartVmsResponseFromJSON, StopVmsRequestToJSON, StopVmsResponseFromJSON, UpdateVmRequestToJSON, UpdateVmResponseFromJSON, } from '../models';
/**
 *
 */
export class VmApi extends runtime.BaseAPI {
    /**
     */
    createVmsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
            }
            const response = yield this.request({
                path: `/CreateVms`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: CreateVmsRequestToJSON(requestParameters.createVmsRequest),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => CreateVmsResponseFromJSON(jsonValue));
        });
    }
    /**
     */
    createVms(requestParameters = {}, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.createVmsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    deleteVmsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
            }
            const response = yield this.request({
                path: `/DeleteVms`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: DeleteVmsRequestToJSON(requestParameters.deleteVmsRequest),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => DeleteVmsResponseFromJSON(jsonValue));
        });
    }
    /**
     */
    deleteVms(requestParameters = {}, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.deleteVmsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    readAdminPasswordRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
            }
            const response = yield this.request({
                path: `/ReadAdminPassword`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: ReadAdminPasswordRequestToJSON(requestParameters.readAdminPasswordRequest),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => ReadAdminPasswordResponseFromJSON(jsonValue));
        });
    }
    /**
     */
    readAdminPassword(requestParameters = {}, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.readAdminPasswordRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    readConsoleOutputRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
            }
            const response = yield this.request({
                path: `/ReadConsoleOutput`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: ReadConsoleOutputRequestToJSON(requestParameters.readConsoleOutputRequest),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => ReadConsoleOutputResponseFromJSON(jsonValue));
        });
    }
    /**
     */
    readConsoleOutput(requestParameters = {}, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.readConsoleOutputRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    readVmTypesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/ReadVmTypes`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: ReadVmTypesRequestToJSON(requestParameters.readVmTypesRequest),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => ReadVmTypesResponseFromJSON(jsonValue));
        });
    }
    /**
     */
    readVmTypes(requestParameters = {}, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.readVmTypesRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    readVmsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
            }
            const response = yield this.request({
                path: `/ReadVms`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: ReadVmsRequestToJSON(requestParameters.readVmsRequest),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => ReadVmsResponseFromJSON(jsonValue));
        });
    }
    /**
     */
    readVms(requestParameters = {}, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.readVmsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    readVmsStateRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
            }
            const response = yield this.request({
                path: `/ReadVmsState`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: ReadVmsStateRequestToJSON(requestParameters.readVmsStateRequest),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => ReadVmsStateResponseFromJSON(jsonValue));
        });
    }
    /**
     */
    readVmsState(requestParameters = {}, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.readVmsStateRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    rebootVmsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
            }
            const response = yield this.request({
                path: `/RebootVms`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: RebootVmsRequestToJSON(requestParameters.rebootVmsRequest),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => RebootVmsResponseFromJSON(jsonValue));
        });
    }
    /**
     */
    rebootVms(requestParameters = {}, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.rebootVmsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    startVmsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
            }
            const response = yield this.request({
                path: `/StartVms`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: StartVmsRequestToJSON(requestParameters.startVmsRequest),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => StartVmsResponseFromJSON(jsonValue));
        });
    }
    /**
     */
    startVms(requestParameters = {}, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.startVmsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    stopVmsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
            }
            const response = yield this.request({
                path: `/StopVms`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: StopVmsRequestToJSON(requestParameters.stopVmsRequest),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => StopVmsResponseFromJSON(jsonValue));
        });
    }
    /**
     */
    stopVms(requestParameters = {}, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.stopVmsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    updateVmRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
            }
            const response = yield this.request({
                path: `/UpdateVm`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: UpdateVmRequestToJSON(requestParameters.updateVmRequest),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => UpdateVmResponseFromJSON(jsonValue));
        });
    }
    /**
     */
    updateVm(requestParameters = {}, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.updateVmRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
}
